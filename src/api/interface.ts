/**
 * SPDX-License-Identifier: Apache-2.0
 * Copyright 2019 FINOS FDC3 contributors - see NOTICE file
 */

type Context = object;

enum OpenError {
  AppNotFound = "AppNotFound",
  ErrorOnLaunch = "ErrorOnLaunch",
  AppTimeout = "AppTimeout",
  ResolverUnavailable = "ResolverUnavailable"
}

enum ResolveError {
  NoAppsFound = "NoAppsFound",
  ResolverUnavailable = "ResolverUnavailable",
  ResolverTimeout = "ResolverTimeout"
}

/**
* Intent descriptor
*/
interface IntentMetadata {
  name: string;
  displayName: string;
}

/**
* An interface that relates an intent to apps
*/
interface AppIntent {
  intent: IntentMetadata;
  apps: Array<AppMetadata>;
}


/**
 * App metadata is Desktop Agent specific - but should support a name property.
 */
interface AppMetadata {
  name: string;
}

/**
 * IntentResolution provides a standard format for data returned upon resolving an intent.
 * ```javascript
 * //resolve a "Chain" type intent
 * var intentR = await agent.raiseIntent("intentName", context);
 * //resolve a "Client-Service" type intent with data response
 * var intentR = await agent.raiseIntent("intentName", context);
 * var dataR = intentR.data;
 * ```
 */
interface IntentResolution {
  source: string;
  data?: object;
  version: string;
}

interface Listener {
  /**
   * Unsubscribe the listener object.
   */
  unsubscribe();
}


/**
 * Object representing a context channel.
 * 
 * All interactions with a context channel happen through the methods on here.
 */
declare class Channel {
  /**
   * Constant that uniquely identifies this channel. Will be generated by the service, and guarenteed to be unique
   * within the set of channels registered with the service.
   * 
   * In the case of `system` channels (see {@link SystemChannel}), these id's _should_ persist across sessions. The 
   * channel list is defined by the service, but can be overridden by a desktop agent. If the desktop agent keeps 
   * this list static (which is recommended), then id's will also persist across sessions.
   */
  public readonly id: string;

  /**
   * Uniquely defines each channel type.
   */
  public readonly type: string;

}

/**
* A system channel will be global enough to have a presence across many apps. This gives us some hints
* to render them in a standard way. It is assumed it may have other properties too, but if it has these, 
* this is their meaning.
*/
declare interface DisplayMetadata{
  /**
   * A user-readable name for this channel, e.g: `"Red"`
   */
  name?: string;

  /**
   * The color that should be associated within this channel when displaying this channel in a UI, e.g: `0xFF0000`.
   */
  color?: string;

  /**
   * A URL of an image that can be used to display this channel
   */
  glyph?: string;
}

/**
* User-facing channels, to display within a colour picker or channel selector component.
* 
* This list of channels should be considered fixed by applications - the service will own the list of user channels,
* making the same list of channels available to all applications, and this list will not change over the lifecycle of
* the service.
* 
* We do not intend to support creation of 'user' channels at runtime, as this then adds considerable complexity when
* implementing a channel selector component (must now support events, 'create channel' UI, reflowing of channel 
* list, etc).
*/
declare class SystemChannel extends Channel {
  type: 'system';

  /**
   * SystemChannels may well be selectable by users. Here are the hints on how to see them.
   */
  displayMetadata: DisplayMetadata;
}

/**
 * A Desktop Agent is a desktop component (or aggregate of components) that serves as a
 * launcher and message router (broker) for applications in its domain.
 * 
 * A Desktop Agent can be connected to one or more App Directories and will use directories for application
 * identity and discovery. Typically, a Desktop Agent will contain the proprietary logic of
 * a given platform, handling functionality like explicit application interop workflows where
 * security, consistency, and implementation requirements are proprietary.
 */
interface DesktopAgent {
  /**
   * Launches an app by name.
   * 
   * If a Context object is passed in, this object will be provided to the opened application via a contextListener.
   * The Context argument is functionally equivalent to opening the target app with no context and broadcasting the context directly to it.
   *
   * If opening errors, it returns an `Error` with a string from the `OpenError` enumeration.
   * 
   *  ```javascript
   *     //no context
   *     agent.open('myApp');
   *     //with context
   *     agent.open('myApp', context);
   * ```
   */
  open(name: string, context?: Context): Promise<void>;

  /**
   * Find out more information about a particular intent by passing its name, and optionally its context.
   *
   * findIntent is effectively granting programmatic access to the Desktop Agent's resolver. 
   * A promise resolving to the intent, its metadata and metadata about the apps that registered it is returned.
   * This can be used to raise the intent against a specific app.
   * 
   * If the resolution fails, the promise will return an `Error` with a string from the `ResolveError` enumeration.
   * 
   * ```javascript
   * // I know 'StartChat' exists as a concept, and want to know more about it ...
   * const appIntent = await agent.findIntent("StartChat");
   * 
   * // returns a single AppIntent:
   * // {
   * //     intent: { name: "StartChat", displayName: "Chat" },
   * //     apps: [{ name: "Skype" }, { name: "Symphony" }, { name: "Slack" }]
   * // }
   * 
   * // raise the intent against a particular app
   * await agent.raiseIntent(appIntent.intent.name, context, appIntent.apps[0].name);
   * ```
   */
  findIntent(intent: string, context?: Context): Promise<AppIntent>;

  /**
   * Find all the avalable intents for a particular context.
   *
   * findIntents is effectively granting programmatic access to the Desktop Agent's resolver. 
   * A promise resolving to all the intents, their metadata and metadata about the apps that registered it is returned,
   * based on the context types the intents have registered.
   * 
   * If the resolution fails, the promise will return an `Error` with a string from the `ResolveError` enumeration.
   *
   * ```javascript
   * // I have a context object, and I want to know what I can do with it, hence, I look for for intents...
   * const appIntents = await agent.findIntentsByContext(context);
   * 
   * // returns for example:
   * // [{
   * //     intent: { name: "StartCall", displayName: "Call" },
   * //     apps: [{ name: "Skype" }]
   * // },
   * // {
   * //     intent: { name: "StartChat", displayName: "Chat" },
   * //     apps: [{ name: "Skype" }, { name: "Symphony" }, { name: "Slack" }]
   * // }];
   * 
   * // select a particular intent to raise
   * const startChat = appIntents[1];
   * 
   * // target a particular app
   * const selectedApp = startChat.apps[0];
   * 
   * // raise the intent, passing the given context, targeting the app
   * await agent.raiseIntent(startChat.intent.name, context, selectedApp.name);
   * ```
   */
  findIntentsByContext(context: Context): Promise<Array<AppIntent>>;

  /**
   * Publishes context to other apps on the desktop.
   * ```javascript
   *  agent.broadcast(context);
   * ```
   */
  broadcast(context: Context): void;

  /**
   * Raises an intent to the desktop agent to resolve.
   * ```javascript
   * //raise an intent to start a chat with a given contact
   * const intentR = await agent.findIntents("StartChat", context);
   * //use the IntentResolution object to target the same chat app with a new context
   * agent.raiseIntent("StartChat", newContext, intentR.source);
   * ```
   */
  raiseIntent(intent: string, context: Context, target?: string): Promise<IntentResolution>;

  /**
   * Adds a listener for incoming Intents from the Agent.
   */
  addIntentListener(intent: string, handler: (context: Context) => void): Listener;

  /**
   * Adds a listener for incoming context broadcast from the Desktop Agent.
   */
  addContextListener(handler: (context: Context) => void): Listener;

  /**
   * Retrieves a list of the System channels available for the app to join
   */
  getSystemChannels(): Promise<Array<SystemChannel>>;

  /**
   * Joins the app to the specified channel
   * An app can only be joined to one channel at a time
   * rejects with error if the channel is unavailable or the join request is denied
   */
  joinChannel(channel: string) : Promise<void>;

  

  /**
   * Broadcasts a context specifically to a channel
   * Channel may be system or app type
   * An app is not required to be a member of the channel they broadcast to, 
   * but the desktop agent may reject their broadcast
   * rejects with error if the broadcast was denied for the channel, channel does not exist, etc
   */
  broadcastToChannel(context: Context, channel: string): Promise<void>;


  /**
   * Adds a listener specific to a channel - System or App
   * rejects with error if the broadcast was denied for the channel, channel does not exist, etc
   */
  addChannelListener(channel: string, handler: (context: Context) => void): Listener;

  /**
   * Creates an App type channel.  
   * rejects with error if the channel already exists or if the app is denied creating a channel
   */
  registerChannel(channel: string): Promise<void>;

  /**
   * Returns the current context for a channel
   * if no channel is specified, will return current context for the joined channel for the app
   */
  getCurrentContext(channel?: string): Promise<Context|null>;
}

